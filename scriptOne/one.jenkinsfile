/* 
Pipeline for deploy CDN service
version 1.0
*/

def PROFILE

pipeline {
    agent any
     
    parameters {
      string(name: 'branch', defaultValue: 'master', description: 'Build from git branch')
      choice(name: 'env', choices: ['DEVELOPMENT', 'PRODUCTIO'], description: 'Deploy to environment')
	  string(name: 'gradleVersion', defaultValue: '6.5.1')
	  booleanParam(name: 'skipTest', defaultValue: false, description: 'Skip test')
      booleanParam(name: 'debug', defaultValue: false, description: 'Debug mode')
    }

    stages {
		
      stage("Validate") {
        steps {
          script {
			println "--- VALIDATE ---"
			
			if(params.debug) {
				println "Debug mode is ON"
				println "Git branch: ${params.branch}"
				println "Deploy to: ${params.env}"
				println "Use gradle: ${params.gradleVersion}"
				gradle('-v', params.gradleVersion)
				println "Skip test: ${params.skipTest}"
			}
			
			if(params.env == 'DEVELOPMENT') {
				PROFILE = 'development';
			} else if (params.env == 'PRODUCTIO') {
				PROFILE = 'production';
			}
            
          }
        }
      }
		
      stage("Checkout") {
        steps {
          script {
			println "--- CHECKOUT ---"
            if(params.debug) {
				println "Try fetch data from repository branch ${params.branch}"
			}
            git url: 'https://git.1plus1.ua/smart/cdn-service', branch: params.branch
          }
        }
      }
	  
	  stage("Test") {
        steps{
          script{
			println "--- Test ---"
			if(params.debug) {
				gradle("clean test --debug", params.gradleVersion);
			} else {
				gradle("clean test", params.gradleVersion);
			}
		  }
        }
      }
      
      stage("Build") {
        steps{
          script{
			println "--- BUILD ---"
			if(params.debug) {
				gradle("clean bootJar --debug", params.gradleVersion);
			} else {
				gradle("clean bootJar", params.gradleVersion);
			}
		  }
        }
      }
      
	  stage("Publish") {
		steps {
		  script {
			println "--- Publish ---"
			
			// in case we note store our build artifacts in any repository then should 
			// TODO:
			// stop cdn-service-0.1 on server
			// take `cdn-service-0.1.jar` we just built in previous step, from `build\libs\` and publish on server
			// start our new jar by command: `java -jar -Dspring.profiles.active=${PROFILE} cdn-service-0.1.jar`
		  }
		}
	  }
	}
}

def gradle(command, version) {
	def GRADLE_HOME = tool name: "gradle-${version}", type: 'hudson.plugins.gradle.GradleInstallation'
    sh "${GRADLE_HOME}/bin/gradle ${command}"
}

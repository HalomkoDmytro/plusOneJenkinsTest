
pipeline {
     agent any
     
    parameters {
      string(name: 'branch', defaultValue: 'master', description: 'Build from git branch')
      choice(name: 'env', choices: ['DEVELOPMENT', 'PRODUCTIO'], description: 'Deploy to environment')
	  string(name: 'gradleVersion', defaultValue: '6.5.1')
	  booleanParam(name: 'skipTest', defaultValue: false, description: 'Skip test')
      booleanParam(name: 'debug', defaultValue: false, description: 'Debug mode')
    }

    stages {
		
		
      stage("Checkout") {
        steps {
          script {
			println "--- CHECKOUT ---"
            if(params.debug) {
				println "Try fetch data from repository branch ${params.branch}"
			}
            git url: 'https://github.com/HalomkoDmytro/TreeContainer.git', branch: params.branch
            
          }
        }
      }
	  
	  stage("Test") {
        steps{
          script{
			println "--- Test ---"
			if(params.debug) {
				gradle('-v', params.gradleVersion)
				gradle('task', params.gradleVersion)
			}
			if(!params.skipTest) {
				gradle("clean test", params.gradleVersion);
			}
		  }
        }
      }
      
      
      stage("Build") {
        steps{
          script{
			println "--- BUILD ---"
			gradle("clean build", params.gradleVersion);
		  }
        }
        
      }
      
	  stage("Publish") {
		steps {
		  script {
			println "--- Publish ---"
			
		  }
		}
	  }
	}
}

def gradle(command, version) {
	def GRADLE_HOME = tool name: "gradle-${version}", type: 'hudson.plugins.gradle.GradleInstallation'
    sh "${GRADLE_HOME}/bin/gradle ${command}"
}
